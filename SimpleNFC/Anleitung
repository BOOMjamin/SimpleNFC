 :::::::: ::::::::::: ::::    ::::  :::::::::  :::        ::::::::::  ::::    ::: :::::::::: ::::::::  
:+:    :+:    :+:     +:+:+: :+:+:+ :+:    :+: :+:        :+:         :+:+:   :+: :+:       :+:    :+: 
+:+           +:+     +:+ +:+:+ +:+ +:+    +:+ +:+        +:+         :+:+:+  +:+ +:+       +:+        
+#++:++#++    +#+     +#+  +:+  +#+ +#++:++#+  +#+        +#++:++#    +#+ +:+ +#+ :#::+::#  +#+        
       +#+    +#+     +#+       +#+ +#+        +#+        +#+         +#+  +#+#+# +#+       +#+        
#+#    #+#    #+#     #+#       #+# #+#        #+#        #+#         #+#   #+#+# #+#       #+#    #+# 
 ######## ########### ###       ### ###        ########## ##########  ###    #### ###        ########  


.__..         ,    __.         .   .  ..___ __ 
[__]|_  _ . .-+-  (__ *._ _ ._ | _ |\ |[__ /  `
|  |[_)(_)(_| |   .__)|[ | )[_)|(/,| \||   \__.
                            |                  

SimpleNFC was developed to enable NFC tag reading and writing without the knowledge of NFC and it's underlying techniques.
With a few simple steps, any Android developer can easily write and read tags for his own application. The following guide
shows you the most important steps.
You should note that SimpleNFC was built on top of the standard NFC technology - it is not a replacement for the available
NFC-API. So you, as a developer, can still use Android Level APIs next to the simpler functions of SimpleNFC.

 __. ,          ,           ._.       ,    ..    ,        
(__ -+- _ ._   /|     ___    | ._  __-+- _.|| _.-+-* _ ._ 
.__) | (/,[_)  .|.          _|_[ )_)  | (_]||(_] | |(_)[ )
          |                                               
          
Copy the SimpleNFC.jar into your current Android project. If you are using Eclipse, right-click the jar and select "Build Path"
-> "Add to Build-Path". Now you should be able to include the needed classes into your code.

 __. ,          _,          .__.     .         .  .  .       ._       , 
(__ -+- _ ._   '_)    ___   [__]._  _|._. _ * _|  |\/| _.._ *|, _  __-+-
.__) | (/,[_)  /_.          |  |[ )(_][  (_)|(_]  |  |(_][ )|| (/,_)  | 

To enable Android to read the tags and pass it to your SimpleNFC-enabled App, you have to add some lines of code into
your Android Manifest.

<activity android:name=".simplenfc.activities.NfcConnector" >
    <intent-filter >
        <action android:name="android.nfc.action.NDEF_DISCOVERED" />
        <data android:mimeType="application/[YOUR_APPLICATION_PACKAGE_NAME]" />
        <category android:name="android.intent.category.DEFAULT" />
    </intent-filter>
</activity>

Be sure to insert your appropriate package name into the mimeType. You should have defined it as you created your project.

 __. ,          _,          .  .     ,          .___.         
(__ -+- _ ._   '_)    ___   |  |._.*-+-*._  _     |   _. _  __
.__) | (/,[_)  ._)          |/\|[  | | |[ )(_]    |  (_](_]_) 
          |                                ._|          ._|   

For this code snippet you have to make sure, that you insert it into the onResume() of your writing Activity.
The easiest way is to call startWriteMode of the class Nfc with the NfcMessage you want to write:

new Nfc(this).startWriteMode([NfcMessage]);

If you want to listen to the results, you can optionally implement a Listener.

new Nfc(this).startWriteMode([NfcMessage], new NfcWriteListener() {
			@Override
			public void onNfcException(IOException e) {
				Log.v("tag", "Hoo, exception.");
			}

			@Override
			public void onNfcException(FormatException e) {
				Log.v("tag", "onNfcException FormatException");
			}
			[and so on...] see NfcWriteListener documentation
});
        
After you called that message and after Android has discovered a new tag, your message will be automagically written.

 __. ,         . ,          .__         .         .___.         
(__ -+- _ ._   |_|    ___   [__) _  _. _|*._  _     |   _. _  __
.__) | (/,[_)    |          |  \(/,(_](_]|[ )(_]    |  (_](_]_) 
          |                                  ._|          ._|   
        
If you want to listen to incoming tags, you have to add so called NfcMassageHandlers to your app. Its recommended to do that in the Main
class of your app (onCreate()).

Nfc nfc = new Nfc(this);
nfc.addNfcMessageHandler("text", Read.class);
nfc.addNfcMessageHandler("link", Read.class); 

"text" and "link" are two random examples - you can set whatever ID you want. Just make sure the ID of your NfcMessage matches
one of the entries you added as a listener. Once Android reads an applicable tag, it will open the Activity you defined in 
addNfcMessageHandler.

In the specified Activity (for example in the class Read, see above) you can check for any messages in the onCreate() method.

Intent intent = this.getIntent();
Nfc nfc = new Nfc(this);
if(nfc.containsNfcMessage(intent)){
	NfcMessage message = nfc.getNfcMessage(intent);
	HashMap<String, NfcRecord> records = message.getRecords();
}

 __. ,         ._,          .___            
(__ -+- _ ._   |_     ___   [__ ._   * _   .
.__) | (/,[_)  ._)          [___[ )  |(_)\_|
          |                        ._|   ._|
          
You now should be able to write and read tags with NFC on your Android powered device. We would love to hear from you if
everything worked out well or if you have any questions. Feel free to contact one of us!

Benjamin RÃ¼hl - simplenfc@benjamin-ruehl.de
Dennis Becker - simplenfc@denbec.de